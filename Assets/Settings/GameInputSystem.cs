//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/GameInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputSystem"",
    ""maps"": [
        {
            ""name"": ""GestureRecording"",
            ""id"": ""c8356526-907d-46ca-b1c4-d1bf396b8717"",
            ""actions"": [
                {
                    ""name"": ""RecordGestureL"",
                    ""type"": ""Button"",
                    ""id"": ""85b65559-26be-4aae-84bd-47bb3953beae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecordGestureR"",
                    ""type"": ""Button"",
                    ""id"": ""bd0a7e5b-511f-4e24-8446-566f2e97564f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c74c92be-e7e9-403e-a94d-bf0ce061075c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecordGestureL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83d82e85-0815-4146-a533-82daf6ad4bcc"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecordGestureR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GestureRecording
        m_GestureRecording = asset.FindActionMap("GestureRecording", throwIfNotFound: true);
        m_GestureRecording_RecordGestureL = m_GestureRecording.FindAction("RecordGestureL", throwIfNotFound: true);
        m_GestureRecording_RecordGestureR = m_GestureRecording.FindAction("RecordGestureR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GestureRecording
    private readonly InputActionMap m_GestureRecording;
    private List<IGestureRecordingActions> m_GestureRecordingActionsCallbackInterfaces = new List<IGestureRecordingActions>();
    private readonly InputAction m_GestureRecording_RecordGestureL;
    private readonly InputAction m_GestureRecording_RecordGestureR;
    public struct GestureRecordingActions
    {
        private @GameInputSystem m_Wrapper;
        public GestureRecordingActions(@GameInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @RecordGestureL => m_Wrapper.m_GestureRecording_RecordGestureL;
        public InputAction @RecordGestureR => m_Wrapper.m_GestureRecording_RecordGestureR;
        public InputActionMap Get() { return m_Wrapper.m_GestureRecording; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GestureRecordingActions set) { return set.Get(); }
        public void AddCallbacks(IGestureRecordingActions instance)
        {
            if (instance == null || m_Wrapper.m_GestureRecordingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GestureRecordingActionsCallbackInterfaces.Add(instance);
            @RecordGestureL.started += instance.OnRecordGestureL;
            @RecordGestureL.performed += instance.OnRecordGestureL;
            @RecordGestureL.canceled += instance.OnRecordGestureL;
            @RecordGestureR.started += instance.OnRecordGestureR;
            @RecordGestureR.performed += instance.OnRecordGestureR;
            @RecordGestureR.canceled += instance.OnRecordGestureR;
        }

        private void UnregisterCallbacks(IGestureRecordingActions instance)
        {
            @RecordGestureL.started -= instance.OnRecordGestureL;
            @RecordGestureL.performed -= instance.OnRecordGestureL;
            @RecordGestureL.canceled -= instance.OnRecordGestureL;
            @RecordGestureR.started -= instance.OnRecordGestureR;
            @RecordGestureR.performed -= instance.OnRecordGestureR;
            @RecordGestureR.canceled -= instance.OnRecordGestureR;
        }

        public void RemoveCallbacks(IGestureRecordingActions instance)
        {
            if (m_Wrapper.m_GestureRecordingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGestureRecordingActions instance)
        {
            foreach (var item in m_Wrapper.m_GestureRecordingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GestureRecordingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GestureRecordingActions @GestureRecording => new GestureRecordingActions(this);
    public interface IGestureRecordingActions
    {
        void OnRecordGestureL(InputAction.CallbackContext context);
        void OnRecordGestureR(InputAction.CallbackContext context);
    }
}
